@use "sass:list";
@use "sass:map";

// type: bg/border , content , active bg/border
$TypeMap: (
  "": base-200 base-content base-300,
  "primary": primary primary-content primary-focus,
  "neutral": neutral neutral-content neutral-focus,
  "info": info info-content info-focus,
  "success": success success-content success-focus,
  "warning": warning warning-content warning-focus,
  "error": error error-content error-focus
);

//Mixins may not contain mixin declarations.
@mixin button-active($typeName, $pseudo: "active", $withoutMedia: false) {
  @if ($withoutMedia) {
    &:#{$pseudo} {
      @apply border-#{$typeName} bg-#{$typeName};
    }
  } @else {
    @if ($pseudo == "hover") {
      @media (hover: hover) {
        &:hover {
          @apply border-#{$typeName} bg-#{$typeName};
        }
      }
    } @else {
      &:#{$pseudo} {
        @apply border-#{$typeName} bg-#{$typeName};
      }
    }
  }

  &.btn-active {
    @apply border-#{$typeName} bg-#{$typeName};
  }
}

@function getSelector($type: "") {
  @if ($type == "") {
    @return "";
  } @else {
    @return "-#{$type}";
  }
}

@mixin default-style($default, $content) {
  // outline may be $default or $content
  @apply border-#{$default} bg-#{$default} text-#{$content} outline-#{$default};
}

.btn {
  @apply no-underline; // @apply gap-2 font-semibold no-underline;
  border-width: var(--border-btn, 1px);
  &:focus-visible {
    @apply outline outline-2 outline-offset-2;
  }
  @each $typeName, $list in $TypeMap {
    $d: list.nth($list, 1);
    $c: list.nth($list, 2);
    $f: list.nth($list, 3);

    $selector: getSelector($typeName);

    &#{$selector} {
      @include default-style($d, $c);
      @include button-active($f);
    }
  }

  /* glass */
  &.glass {
    @apply shadow-none outline-current;
    @media (hover: hover) {
      &:hover {
        --glass-opacity: 25%;
        --glass-border-opacity: 15%;
      }
    }
    &.btn-active {
      --glass-opacity: 25%;
      --glass-border-opacity: 15%;
    }
  }

  /* btn variants */
  &-ghost {
    @apply border border-transparent bg-transparent text-current shadow-none outline-current;
    @media (hover: hover) {
      &:hover {
        @apply bg-base-content border-opacity-0 bg-opacity-20;
      }
    }
    &.btn-active {
      @apply bg-base-content border-opacity-0 bg-opacity-20;
    }
  }

  &-link {
    @apply text-primary border-transparent bg-transparent underline shadow-none outline-current;
    @media (hover: hover) {
      &:hover {
        @apply border-transparent bg-transparent underline;
      }
    }
    &.btn-active {
      @apply border-transparent bg-transparent underline;
    }
  }

  /* outline */
  &-outline {
    @apply text-base-content border-current bg-transparent shadow-none;
    @media (hover: hover) {
      &:hover {
        @apply border-base-content bg-base-content text-base-100;
      }
    }
    &.btn-active {
      @apply border-base-content bg-base-content text-base-100;
    }
    &.btn-primary {
      @apply text-primary;
      @media (hover: hover) {
        &:hover {
          @apply border-primary-focus bg-primary-focus text-primary-content;
        }
      }
      &.btn-active {
        @apply border-primary-focus bg-primary-focus text-primary-content;
      }
    }

    &.btn-success {
      @apply text-success;
      @media (hover: hover) {
        &:hover {
          @apply border-success bg-success text-success-content;
        }
      }
      &.btn-active {
        @apply border-success bg-success text-success-content;
      }
    }
    &.btn-info {
      @apply text-info;
      @media (hover: hover) {
        &:hover {
          @apply border-info bg-info text-info-content;
        }
      }
      &.btn-active {
        @apply border-info bg-info text-info-content;
      }
    }
    &.btn-warning {
      @apply text-warning;
      @media (hover: hover) {
        &:hover {
          @apply border-warning bg-warning text-warning-content;
        }
      }
      &.btn-active {
        @apply border-warning bg-warning text-warning-content;
      }
    }
    &.btn-error {
      @apply text-error;
      @media (hover: hover) {
        &:hover {
          @apply border-error bg-error text-error-content;
        }
      }
      &.btn-active {
        @apply border-error bg-error text-error-content;
      }
    }
  }

  /* disabled */
  &.btn-disabled,
  &[disabled],
  &:disabled {
    @apply bg-neutral text-base-content border-opacity-0 bg-opacity-20 text-opacity-20;
  }
  // @media (hover: hover) {
  //   &-disabled:hover,
  //   &[disabled]:hover,
  //   &:disabled:hover {
  //     @apply bg-neutral text-base-content border-opacity-0 bg-opacity-20 text-opacity-20;
  //   }
  // }
}

/* radio input and checkbox as button */
.btn:is(input[type="checkbox"]:checked),
.btn:is(input[type="radio"]:checked) {
  @apply border-primary bg-primary text-primary-content;
  @media (hover: hover) {
    &:hover {
      @apply border-primary-focus bg-primary-focus;
    }
  }
  &:focus-visible {
    @apply outline-primary;
  }
}
