@use "sass:string";
@use "sass:meta";

@function composeStringArray($list) {
  $result: null;
  @each $item in $list {
    @if ($result == null) {
      $result: $item;
    } @else {
      $result: #{$result} #{$item};
    }
  }

  @return #{$result};
}

@mixin spread($map, $depth: 0) {
  @if (meta.type-of($map) == map) {
    @each $s, $m in $map {
      @if ($s == "css" or $s == "apply" or $s == "sort") {
        @if ($depth > 0) {
          @if ($s == "apply") {
            @if ($m != null) {
              @if (meta.type-of($m) == string) {
                @apply #{$m};
              } @else if (meta.type-of($m) == list) {
                @each $applyList in $m {
                  @if (meta.type-of($applyList) == list) {
                    @apply #{composeStringArray($applyList)};
                  } @else if((meta.type-of($applyList) == string)) {
                    @apply #{$applyList};
                  }
                }
              }
            }
          } @else if($s == "css") {
            @if ($m!=null and meta.type-of($m) == map) {
              @each $name, $value in $m {
                #{$name}: $value;
              }
            }
          }
        }
      } @else {
        @if (string.index($s, "@") == 1) {
          $spaceIdx: string.index($s, " ");
          @#{string.slice($s, 2,$spaceIdx - 1)} #{string.slice($s, $spaceIdx+1)} {
            @include spread($m, $depth + 1);
          }
        } @else {
          #{$s} {
            @include spread($m, $depth + 1);
          }
        }
      }
    }
  }
}
