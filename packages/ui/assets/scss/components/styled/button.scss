@use "../../utils/index.scss" as *;
@use "sass:map";
@use "sass:meta";

$TypeMap: inject("button.colors");
$DefaultMap: inject("button.defaults.styled");
$hoverMedia: map.get($DefaultMap, "hoverMedia");
//Mixins may not contain mixin declarations.
@mixin button-active($applyStr, $pseudo: "active") {
  &:#{$pseudo} {
    @include resolve($applyStr);
  }

  &.btn-active {
    @include resolve($applyStr);
  }
}

@mixin button-hover($applyStr, $pseudo: "hover") {
  @if ($applyStr == null) {
  } @else {
    @if ($hoverMedia) {
      @include AtMediaHover {
        &:#{$pseudo} {
          @include resolve($applyStr);
        }
      }
    } @else {
      &:#{$pseudo} {
        @include resolve($applyStr);
      }
    }
  }
}

@mixin spread($map, $t: null) {
  @if ($t == null) {
    @include resolve(map.get($map, "default"));
    @include button-hover(map.get($map, "hover"));
    @include button-active(map.get($map, "active"));
  } @else {
    @include resolve(map.get($map, $t));
    @include button-hover(map.get($map, "#{$t}Hover"));
    @include button-active(map.get($map, "#{$t}Active"));
  }
}

.btn {
  &:focus-visible {
    @include resolve(map.get($DefaultMap, "focusVisible"));
  }
  @include spread($DefaultMap);

  @each $typeName, $map in $TypeMap {
    &#{getSelector($typeName)} {
      @include spread($map);
    }
  }
  // @each $typeName, $map in $TypeMap {
  //   $selector: getSelector($typeName, ".btn-");
  //   &#{$selector} {
  //     @include spread($map);
  //   }
  // }

  $vars: (
    "&.glass": "glass",
    "&-ghost": "ghost",
    "&-link": "link"
  );
  @each $s, $t in $vars {
    #{$s} {
      @include spread($DefaultMap, $t);
    }
  }
  $t: "outline";
  &-#{$t} {
    @include spread($DefaultMap, $t);
    @each $typeName, $map in $TypeMap {
      $selector: getSelector($typeName, ".btn-");

      &#{$selector} {
        @include spread($map, $t);
      }
    }
  }

  &.btn-disabled,
  &[disabled],
  &:disabled {
    @include resolve(map.get($DefaultMap, "disabled"));
  }
}
// $InputTypeMap: map.get($DefaultMap, "inputType");
// for input element
// .btn:is(input[type="checkbox"]:checked),
// .btn:is(input[type="radio"]:checked) {
//   @include resolve(map.get($InputTypeMap, "default"));
//   &:active {
//     @include resolve(map.get($InputTypeMap, "active"));
//   }
//   &:focus-visible {
//     @include resolve(map.get($InputTypeMap, "focusVisible"));
//   }
// }
