@use "sass:string";
@use "sass:math";
@use "sass:meta";
@use "sass:map";
// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()
@function getRgbaString($color) {
  @if (meta.type-of($color) == color) {
    $alpha: color.alpha($color);

    @if ($alpha == 1 or $alpha == 0) {
      @return #{color.red($color) color.green($color) color.blue($color)};
    } @else {
      @return #{color.red($color) color.green($color) color.blue($color) "/" color.alpha($color)};
    }
  } @else {
    @return $color;
  }
}

@function getRgbString($color) {
  @if (meta.type-of($color) == color) {
    @return #{color.red($color) color.green($color) color.blue($color)};
  } @else {
    @return $color;
  }
}

$globalAtMediaHover: globalAtMediaHover();

@function getSelector($type, $prefix: "-") {
  @if ($type == "") {
    @return "";
  } @else {
    @return "#{$prefix}#{$type}";
  }
}

@function removeBorderPrefix($str) {
  @return removePrefix($str, "border-");
}

@function removeBgPrefix($str) {
  @return removePrefix($str, "bg-");
}

@function removeTextPrefix($str) {
  @return removePrefix($str, "text-");
}

@function removePrefix($str, $prefix) {
  @return string.slice($str, string.length($prefix) + 1);
}

@mixin AtMediaHover {
  @if ($globalAtMediaHover) {
    @media (hover: hover) {
      @content;
    }
  } @else {
    @content;
  }
}

@function ApplyAtMediaHover($str) {
  @if ($globalAtMediaHover) {
    @return "[@media(hover:hover)]:#{$str}";
  } @else {
    @return $str;
  }
}

@function composeStringArray($list) {
  $result: null;
  @each $item in $list {
    @if ($result == null) {
      $result: $item;
    } @else {
      $result: #{$result} #{$item};
    }
  }

  @return #{$result};
}

// type-of null == "null"
// null == null

// @else if($type == list) {
//   $arg: (
//     apply: composeStringArray($arg)
//   );
// }
@mixin resolve($arg) {
  $type: meta.type-of($arg);

  @if ($type == string) {
    $arg: (
      apply: $arg
    );
  } @else if($type == map and meta.type-of(map.get($arg, "css")) == null) {
    $arg: (
      css: $arg
    );
  } @else if($type == "null") {
    $arg: ();
  }
  $apply: map.get($arg, "apply");
  $css: map.get($arg, "css");
  $sort: map.get($arg, "sort");
  @if ($sort == null or $sort == "asc") {
    @if ($apply != null and meta.type-of($apply) == string) {
      @apply #{$apply};
    }
    @if ($css!=null and meta.type-of($css) == map) {
      @each $name, $value in $css {
        #{$name}: $value;
      }
    }
  } @else if($sort == "desc") {
    @if ($css!=null and meta.type-of($css) == map) {
      @each $name, $value in $css {
        #{$name}: $value;
      }
    }
    @if ($apply != null and meta.type-of($apply) == string) {
      @apply #{$apply};
    }
  }
}

@mixin spread($map, $depth: 0) {
  @if (meta.type-of($map) == map) {
    @each $s, $m in $map {
      @if ($s == "css" or $s == "apply" or $s == "sort") {
        @if ($depth > 0) {
          @if ($s == "apply") {
            @if ($m != null and meta.type-of($m) == string) {
              @apply #{$m};
            }
          } @else if($s == "css") {
            @if ($m!=null and meta.type-of($m) == map) {
              @each $name, $value in $m {
                #{$name}: $value;
              }
            }
          }
        }
      } @else {
        #{$s} {
          @include spread($m, $depth + 1);
        }
      }
    }
  }
}
