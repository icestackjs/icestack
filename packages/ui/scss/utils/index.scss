@use "sass:string";
@use "sass:math";
@use "sass:meta";
@use "sass:map";
// https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()
@function getRgbaString($color) {
  @if (meta.type-of($color) == color) {
    $alpha: color.alpha($color);

    @if ($alpha == 1 or $alpha == 0) {
      @return #{color.red($color) color.green($color) color.blue($color)};
    } @else {
      @return #{color.red($color) color.green($color) color.blue($color) "/" color.alpha($color)};
    }
  } @else {
    @return $color;
  }
}

@function getRgbString($color) {
  @if (meta.type-of($color) == color) {
    @return #{color.red($color) color.green($color) color.blue($color)};
  } @else {
    @return $color;
  }
}

$globalAtMediaHover: globalAtMediaHover();

@function getSelector($type, $prefix: "-") {
  @if ($type == "") {
    @return "";
  } @else {
    @return "#{$prefix}#{$type}";
  }
}

@function removeBorderPrefix($str) {
  @return removePrefix($str, "border-");
}

@function removeBgPrefix($str) {
  @return removePrefix($str, "bg-");
}

@function removeTextPrefix($str) {
  @return removePrefix($str, "text-");
}

@function removePrefix($str, $prefix) {
  @return string.slice($str, string.length($prefix) + 1);
}

@mixin AtMediaHover {
  @if ($globalAtMediaHover) {
    @media (hover: hover) {
      @content;
    }
  } @else {
    @content;
  }
}

@function ApplyAtMediaHover($str) {
  @if ($globalAtMediaHover) {
    @return "[@media(hover:hover)]:#{$str}";
  } @else {
    @return $str;
  }
}

@function composeStringArray($list) {
  $result: null;
  @each $item in $list {
    @if ($result == null) {
      $result: $item;
    } @else {
      $result: #{$result} #{$item};
    }
  }

  @return #{$result};
}

@mixin spread($map, $depth: 0) {
  @if (meta.type-of($map) == map) {
    @each $s, $m in $map {
      @if ($s == "css" or $s == "apply" or $s == "sort") {
        @if ($depth > 0) {
          @if ($s == "apply") {
            @if ($m != null) {
              @if (meta.type-of($m) == string) {
                @apply #{$m};
              } @else if (meta.type-of($m) == list) {
                @each $applyList in $m {
                  @if (meta.type-of($applyList) == list) {
                    @apply #{composeStringArray($applyList)};
                  } @else if((meta.type-of($applyList) == string)) {
                    @apply #{$applyList};
                  }
                }
              }
            }
          } @else if($s == "css") {
            @if ($m!=null and meta.type-of($m) == map) {
              @each $name, $value in $m {
                #{$name}: $value;
              }
            }
          }
        }
      } @else {
        @if (string.index($s, "@") == 1) {
          $spaceIdx: string.index($s, " ");
          @#{string.slice($s, 2,$spaceIdx - 1)} #{string.slice($s, $spaceIdx+1)} {
            @include spread($m, $depth + 1);
          }
        } @else {
          #{$s} {
            @include spread($m, $depth + 1);
          }
        }
      }
    }
  }
}
