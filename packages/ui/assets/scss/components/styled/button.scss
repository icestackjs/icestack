@use "../utils/index.scss" as *;
@use "sass:map";

$TypeMap: injectButtonColors();

//Mixins may not contain mixin declarations.
@mixin button-active($applyStr, $pseudo: "active", $withoutMedia: false) {
  @if ($withoutMedia) {
    &:#{$pseudo} {
      @apply #{$applyStr};
    }
  } @else {
    @if ($pseudo == "hover") {
      @media (hover: hover) {
        &:hover {
          @apply #{$applyStr};
        }
      }
    } @else {
      &:#{$pseudo} {
        @apply #{$applyStr};
      }
    }
  }

  &.btn-active {
    @apply #{$applyStr};
  }
}

.btn {
  @apply no-underline; // @apply gap-2 font-semibold no-underline;
  border-width: var(--border-btn, 1px);
  &:focus-visible {
    @apply outline outline-2 outline-offset-2;
  }
  @each $typeName, $map in $TypeMap {
    $d: map.get($map, "default");
    $a: map.get($map, "active");

    $selector: getSelector($typeName);

    &#{$selector} {
      @apply #{$d};
      @include button-active($a);
    }
  }

  &.glass {
    @apply shadow-none outline-current;

    &:active {
      --glass-opacity: 25%;
      --glass-border-opacity: 15%;
    }

    &.btn-active {
      --glass-opacity: 25%;
      --glass-border-opacity: 15%;
    }
  }

  &-ghost {
    @apply border border-transparent bg-transparent text-current shadow-none outline-current;
    @include button-active(border-opacity-0 bg-base-content bg-opacity-20);
  }

  &-link {
    @apply text-primary border-transparent bg-transparent underline shadow-none outline-current;
    @include button-active(border-transparent bg-transparent underline);
  }

  &-outline {
    @each $typeName, $map in $TypeMap {
      $d: map.get($map, "default");
      $a: map.get($map, "outline-active");
      $pc: map.get($map, "primary-color");
      $selector: getSelector($typeName, ".btn-");

      &#{$selector} {
        @if ($typeName == "") {
          @apply border-current bg-transparent shadow-none;
          @apply text-base-content;
          @include button-active($a);
        } @else {
          @apply text-#{$pc};
          @include button-active($a);
        }
      }
    }
  }

  &.btn-disabled,
  &[disabled],
  &:disabled {
    @apply bg-neutral text-base-content border-opacity-0 bg-opacity-20 text-opacity-20;
  }
}

.btn:is(input[type="checkbox"]:checked),
.btn:is(input[type="radio"]:checked) {
  @apply border-primary bg-primary text-primary-content;
  &:active {
    @apply border-primary-focus bg-primary-focus;
  }
  &:focus-visible {
    @apply outline-primary;
  }
}
