@use "../utils/index.scss" as *;
@use "sass:map";
@use "sass:meta";

$TypeMap: injectButtonColors();
$DefaultMap: map.get(injectButtonDefaults(), "styled");
//Mixins may not contain mixin declarations.
@mixin button-active($applyStr, $pseudo: "active", $withoutMedia: false) {
  @if ($withoutMedia) {
    &:#{$pseudo} {
      @include resolve($applyStr);
    }
  } @else {
    @if ($pseudo == "hover") {
      @include AtMediaHover {
        &:hover {
          @include resolve($applyStr);
        }
      }
    } @else {
      &:#{$pseudo} {
        @include resolve($applyStr);
      }
    }
  }

  &.btn-active {
    @include resolve($applyStr);
  }
}

.btn {
  @apply no-underline; // @apply gap-2 font-semibold no-underline;
  border-width: var(--border-btn, 1px);
  &:focus-visible {
    @apply outline outline-2 outline-offset-2;
  }
  $default: map.get($DefaultMap, "default");
  $active: map.get($DefaultMap, "active");
  @apply #{$default};
  @include button-active($active);

  @each $typeName, $map in $TypeMap {
    $d: map.get($map, "default");
    $a: map.get($map, "active");

    $selector: getSelector($typeName);

    &#{$selector} {
      @apply #{$d};
      @include button-active($a);
    }
  }

  $vars: (
    "&.glass": "glass",
    "&-ghost": "ghost",
    "&-link": "link"
  );
  @each $s, $t in $vars {
    #{$s} {
      @apply #{map.get($DefaultMap, $t)};
      @include button-active(map.get($DefaultMap, "#{$t}Active"));
    }
  }

  &-outline {
    $outline: map.get($DefaultMap, "outline");
    @apply #{$outline};

    $outlineActive: map.get($DefaultMap, "outlineActive");
    @include button-active($outlineActive);
    @each $typeName, $map in $TypeMap {
      $d: map.get($map, "default");
      $a: map.get($map, "outlineActive");
      $o: map.get($map, "outline");
      $selector: getSelector($typeName, ".btn-");

      &#{$selector} {
        @apply #{$o};
        @include button-active($a);
      }
    }
  }

  &.btn-disabled,
  &[disabled],
  &:disabled {
    @apply #{map.get($DefaultMap, "disabled")};
  }
}

// for input element
.btn:is(input[type="checkbox"]:checked),
.btn:is(input[type="radio"]:checked) {
  @apply border-primary bg-primary text-primary-content;
  &:active {
    @apply border-primary-focus bg-primary-focus;
  }
  &:focus-visible {
    @apply outline-primary;
  }
}
