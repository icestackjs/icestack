'use strict'; function t(r) { '@babel/helpers - typeof'; return (t = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol' ? function (t) { return typeof t } : function (t) { return t && typeof Symbol == 'function' && t.constructor === Symbol && t !== Symbol.prototype ? 'symbol' : typeof t })(r) } function r(t, r, i) { return r = e(r), r in t ? Object.defineProperty(t, r, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : t[r] = i, t } function e(r) { const e = i(r, 'string'); return t(e) === 'symbol' ? e : String(e) } function i(r, e) {
  if (t(r) !== 'object' || r === null) { return r } const i = r[Symbol.toPrimitive]; if (void 0 !== i) {
    const o = i.call(r, e || 'default'); if (t(o) !== 'object') { return o } throw new TypeError('@@toPrimitive must return a primitive value.')
  } return (e === 'string' ? String : Number)(r)
}Component({ data: { ctrl: {}, isiOS: wx.getSystemInfoSync().system.includes('iOS') }, properties: { childs: Array, opts: Array }, options: { addGlobalClass: !0 }, attached() { this.triggerEvent('add', this, { bubbles: !0, composed: !0 }) }, methods: { noop() {}, getNode(t) {
  try { for (var r = t.split('_'), e = this.data.childs[r[0]], i = 1; i < r.length; i++) { e = e.children[r[i]] } return e }
  catch (t) { return { text: '', attrs: {}, children: [] } }
}, play(t) { if (this.root.triggerEvent('play'), this.root.data.pauseVideo) { for (var r = !1, e = t.target.id, i = this.root._videos.length; i--;) { this.root._videos[i].id === e ? r = !0 : this.root._videos[i].pause() } if (!r) { const o = wx.createVideoContext(e, this); o.id = e, this.root.playbackRate && o.playbackRate(this.root.playbackRate), this.root._videos.push(o) } } }, imgTap(t) {
  const r = this.getNode(t.target.dataset.i); if (r.a) { return this.linkTap(r.a) } if (!r.attrs.ignore && (this.root.triggerEvent('imgtap', r.attrs), this.root.data.previewImg)) { const e = this.root.imgList[r.i]; wx.previewImage({ showmenu: this.root.data.showImgMenu, current: e, urls: this.root.imgList }) }
}, imgLoad(t) { let e; const i = t.target.dataset.i; const o = this.getNode(i); o.w ? (this.data.opts[1] && !this.data.ctrl[i] || this.data.ctrl[i] === -1) && (e = 1) : e = t.detail.width, e && this.setData(r({}, `ctrl.${i}`, e)), this.checkReady() }, checkReady() { const t = this; this.root.data.lazyLoad || (this.root.imgList._unloadimgs -= 1, this.root.imgList._unloadimgs || setTimeout(() => { t.root.getRect().then((r) => { t.root.triggerEvent('ready', r) }).catch(() => { t.root.triggerEvent('ready', {}) }) }, 350)) }, linkTap(t) { const r = t.currentTarget ? this.getNode(t.currentTarget.dataset.i) : {}; const e = r.attrs || t; const i = e.href; this.root.triggerEvent('linktap', Object.assign({ innerText: this.root.getText(r.children || []) }, e)), i && (i[0] === '#' ? this.root.navigateTo(i.substring(1)).catch(() => {}) : i.split('?')[0].includes('://') ? this.root.data.copyLink && wx.setClipboardData({ data: i, success() { return wx.showToast({ title: '链接已复制' }) } }) : wx.navigateTo({ url: i, fail() { wx.switchTab({ url: i, fail() {} }) } })) }, mediaError(t) {
  const e = t.target.dataset.i; const i = this.getNode(e); if (i.name === 'video' || i.name === 'audio') {
    let o = (this.data.ctrl[e] || 0) + 1; if (o > i.src.length && (o = 0), o < i.src.length) { return this.setData(r({}, `ctrl.${e}`, o)) }
  }
  else {
    i.name === 'img' && (this.data.opts[2] && this.setData(r({}, `ctrl.${e}`, -1)), this.checkReady())
  } this.root && this.root.triggerEvent('error', { source: i.name, attrs: i.attrs, errMsg: t.detail.errMsg })
} } })
