@use "sass:list";
@use "sass:map";

// type: bg/border , content , active bg/border
$TypeMap: injectBtnColors();
@debug $TypeMap;
//Mixins may not contain mixin declarations.
@mixin button-active($bgRef, $borderRef: null, $append: "", $pseudo: "active", $withoutMedia: false) {
  @if ($borderRef == null) {
    $borderRef: $bgRef;
  }
  $applyStr: "border-#{$borderRef} bg-#{$bgRef} #{$append}";
  @if ($withoutMedia) {
    &:#{$pseudo} {
      @apply #{$applyStr};
    }
  } @else {
    @if ($pseudo == "hover") {
      @media (hover: hover) {
        &:hover {
          @apply #{$applyStr};
        }
      }
    } @else {
      &:#{$pseudo} {
        @apply #{$applyStr};
      }
    }
  }

  &.btn-active {
    @apply #{$applyStr};
  }
}

@function getBtnSelector($type: "") {
  @if ($type == "") {
    @return "";
  } @else {
    @return "-#{$type}";
  }
}

@mixin default-style($default, $content) {
  // outline may be $default or $content
  @apply border-#{$default} bg-#{$default} text-#{$content} outline-#{$default};
}

.btn {
  @apply no-underline; // @apply gap-2 font-semibold no-underline;
  border-width: var(--border-btn, 1px);
  &:focus-visible {
    @apply outline outline-2 outline-offset-2;
  }
  @each $typeName, $list in $TypeMap {
    $d: list.nth($list, 1);
    $c: list.nth($list, 2);
    $f: list.nth($list, 3);

    $selector: getBtnSelector($typeName);

    &#{$selector} {
      @include default-style($d, $c);
      @include button-active($f);
    }
  }

  /* glass */
  &.glass {
    @apply shadow-none outline-current;

    &:active {
      --glass-opacity: 25%;
      --glass-border-opacity: 15%;
    }

    &.btn-active {
      --glass-opacity: 25%;
      --glass-border-opacity: 15%;
    }
  }

  &-ghost {
    @apply border border-transparent bg-transparent text-current shadow-none outline-current;
    @include button-active(base-content, opacity-0, bg-opacity-20);
  }

  &-link {
    @apply text-primary border-transparent bg-transparent underline shadow-none outline-current;
    @include button-active(transparent, transparent, underline);
  }

  /* outline */
  &-outline {
    @function getOutlineSelector($type: "") {
      @if ($type == "") {
        @return "";
      } @else {
        @return ".btn-#{$type}";
      }
    }

    @each $typeName, $list in $TypeMap {
      $d: list.nth($list, 1);
      $c: list.nth($list, 2);
      $f: list.nth($list, 3);

      $selector: getOutlineSelector($typeName);

      &#{$selector} {
        @if ($typeName == "") {
          @apply border-current bg-transparent shadow-none;
          @apply text-base-content;
          @include button-active(base-content, base-content, text-base-100);
        } @else {
          @apply text-#{$d};
          @include button-active($f, $f, text-#{$c});
        }
      }
    }
  }

  /* disabled */
  &.btn-disabled,
  &[disabled],
  &:disabled {
    @apply bg-neutral text-base-content border-opacity-0 bg-opacity-20 text-opacity-20;
  }
}

.btn:is(input[type="checkbox"]:checked),
.btn:is(input[type="radio"]:checked) {
  @apply border-primary bg-primary text-primary-content;
  &:active {
    @apply border-primary-focus bg-primary-focus;
  }
  &:focus-visible {
    @apply outline-primary;
  }
}
